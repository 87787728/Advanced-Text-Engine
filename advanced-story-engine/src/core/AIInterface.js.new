const { GoogleGenerativeAI } = require('@google/generative-ai');
const logger = require('../utils/logger');
const { AppError } = require('../utils/errorHandler');

/**
 * Handles all interactions with the AI service for narrative generation and analysis.
 * Manages prompt construction, API calls, and response parsing.
 * 
 * @class AIInterface
 * @example
 * const ai = new AIInterface('your-api-key');
 * const story = await ai.generateStory('What happens next?', worldState);
 */
class AIInterface {
    /**
     * Creates a new AIInterface instance.
     * 
     * @param {string} apiKey - The API key for the AI service
     * @param {Object} [options] - Configuration options
     * @param {string} [options.modelName='gemini-pro'] - The model to use
     * @param {number} [options.maxRetries=3] - Maximum number of retry attempts for API calls
     * @throws {AppError} If API key is missing or invalid
     */
    constructor(apiKey, options = {}) {
        try {
            if (!apiKey) {
                throw new Error('API key is required');
            }
            
            const { 
                modelName = 'gemini-pro',
                maxRetries = 3,
                temperature = 0.7,
                maxOutputTokens = 1000
            } = options;
            
            logger.info('Initializing AIInterface...', { modelName });
            
            this.genAI = new GoogleGenerativeAI(apiKey);
            this.model = this.genAI.getGenerativeModel({ 
                model: modelName,
                generationConfig: {
                    temperature,
                    maxOutputTokens
                }
            });
            
            this.maxRetries = maxRetries;
            this.requestCount = 0;
            
            // Initialize prompt builders
            this.prompts = {
                entityDetection: this.buildEntityDetectionPrompt.bind(this),
                storyGeneration: this.buildStoryGenerationPrompt.bind(this),
                consequenceAnalysis: this.buildConsequenceAnalysisPrompt.bind(this),
                worldAnalysis: this.buildWorldAnalysisPrompt.bind(this)
            };
            
            logger.info('AIInterface initialized successfully');
            
        } catch (error) {
            const errorMsg = `Failed to initialize AIInterface: ${error.message}`;
            logger.error(errorMsg, { error });
            throw new AppError(errorMsg, 500, false);
        }
    }
    
    /**
     * Makes a request to the AI model with retry logic.
     * 
     * @private
     * @param {string} prompt - The prompt to send to the AI
     * @param {number} [attempt=1] - Current attempt number
     * @returns {Promise<string>} The generated response
     * @throws {AppError} If all retry attempts fail
     */
    async makeRequest(prompt, attempt = 1) {
        try {
            this.requestCount++;
            const requestId = `req-${Date.now()}-${this.requestCount}`;
            
            logger.debug(`AI Request #${attempt} (${requestId})`, { 
                promptLength: prompt.length,
                promptPreview: prompt.substring(0, 100) + (prompt.length > 100 ? '...' : '')
            });
            
            const result = await this.model.generateContent(prompt);
            const response = await result.response.text();
            
            logger.debug(`AI Response (${requestId})`, {
                responseLength: response.length,
                responsePreview: response.substring(0, 200) + (response.length > 200 ? '...' : '')
            });
            
            return response;
            
        } catch (error) {
            if (attempt >= this.maxRetries) {
                throw new AppError(
                    `AI request failed after ${this.maxRetries} attempts: ${error.message}`,
                    503,
                    true // isRetryable
                );
            }
            
            // Exponential backoff
            const delay = Math.min(1000 * Math.pow(2, attempt), 30000);
            logger.warn(`AI request failed (attempt ${attempt}/${this.maxRetries}), retrying in ${delay}ms`, {
                error: error.message,
                nextAttemptInMs: delay
            });
            
            await new Promise(resolve => setTimeout(resolve, delay));
            return this.makeRequest(prompt, attempt + 1);
        }
    }
    
    /**
     * Detects entities mentioned in player input.
     * 
     * @param {string} playerInput - The player's input text
     * @param {Object} narrative - Current narrative context
     * @param {Object} worldState - Current world state
     * @returns {Promise<Object>} Detected entities, relationships, and world updates
     * @throws {AppError} If entity detection fails
     */
    async detectEntities(playerInput, narrative, worldState) {
        try {
            logger.debug('Detecting entities in player input', { 
                inputLength: playerInput.length,
                inputPreview: playerInput.substring(0, 50) + (playerInput.length > 50 ? '...' : '')
            });
            
            const prompt = this.prompts.entityDetection(playerInput, narrative, worldState);
            const response = await this.makeRequest(prompt);
            
            const result = this.parseEntityDetectionResponse(response);
            
            logger.info('Entity detection completed', {
                entities: Object.keys(result.entities).length,
                relationships: result.relationships.length,
                worldUpdates: Object.keys(result.worldUpdates).length
            });
            
            return result;
            
        } catch (error) {
            const errorMsg = `Entity detection failed: ${error.message}`;
            logger.error(errorMsg, { 
                error, 
                playerInput: playerInput?.substring(0, 100) || 'No input'
            });
            
            if (error instanceof AppError) {
                throw error;
            }
            throw new AppError(errorMsg, 500, false);
        }
    }
    
    /**
     * Generates a story segment based on player input and world state.
     * 
     * @param {string} playerInput - The player's input or action
     * @param {Object} worldState - Current world state
     * @returns {Promise<string>} The generated story text
     * @throws {AppError} If story generation fails
     */
    async generateStory(playerInput, worldState) {
        try {
            logger.debug('Generating story', { 
                inputLength: playerInput?.length || 0,
                worldStateSummary: worldState ? 'Provided' : 'Missing'
            });
            
            const prompt = this.prompts.storyGeneration(playerInput, worldState);
            const response = await this.makeRequest(prompt);
            
            logger.info('Story generation completed', {
                responseLength: response.length,
                responsePreview: response.substring(0, 100) + (response.length > 100 ? '...' : '')
            });
            
            return response;
            
        } catch (error) {
            const errorMsg = `Story generation failed: ${error.message}`;
            logger.error(errorMsg, { 
                error,
                playerInput: playerInput?.substring(0, 100) || 'No input',
                worldStateSummary: worldState ? 'Provided' : 'Missing'
            });
            
            if (error instanceof AppError) {
                throw error;
            }
            
            // Return a fallback response if generation fails
            return "The narrative falters for a moment as unexpected forces ripple through the story's fabric. The tale continues, but some details may have been lost in the chaos...";
        }
    }
    
    /**
     * Analyzes the consequences of a player's choice.
     * 
     * @param {string} playerInput - The player's input or action
     * @param {Object} choice - The choice being analyzed
     * @param {Object} worldState - Current world state
     * @returns {Promise<Object>} Analysis of consequences and impacts
     * @throws {AppError} If consequence analysis fails
     */
    async analyzeConsequences(playerInput, choice, worldState) {
        try {
            logger.debug('Analyzing consequences', { 
                choice: JSON.stringify(choice),
                worldStateSummary: worldState ? 'Provided' : 'Missing'
            });
            
            const prompt = this.prompts.consequenceAnalysis(playerInput, choice, worldState);
            const response = await this.makeRequest(prompt);
            
            const result = this.parseConsequenceResponse(response);
            
            logger.info('Consequence analysis completed', {
                consequences: Object.keys(result.consequences).length,
                impacts: result.impacts.length
            });
            
            return result;
            
        } catch (error) {
            const errorMsg = `Consequence analysis failed: ${error.message}`;
            logger.error(errorMsg, { 
                error,
                choice: JSON.stringify(choice),
                playerInput: playerInput?.substring(0, 100) || 'No input'
            });
            
            if (error instanceof AppError) {
                throw error;
            }
            
            // Return a safe default if analysis fails
            return { 
                consequences: {},
                impacts: [],
                error: 'Failed to analyze consequences',
                isFallback: true
            };
        }
    }
    
    // ===== Prompt Builders =====
    
    /**
     * Builds a prompt for entity detection.
     * 
     * @private
     * @param {string} playerInput - The player's input text
     * @param {Object} narrative - Current narrative context
     * @param {Object} worldState - Current world state
     * @returns {string} The constructed prompt
     */
    buildEntityDetectionPrompt(playerInput, narrative, worldState) {
        // Implementation would go here
        return `Analyze the following player input for entities, relationships, and world updates:
        
Player Input: "${playerInput}"

Current Narrative Context:
${JSON.stringify(narrative, null, 2)}

Current World State:
${JSON.stringify(worldState, null, 2)}

Respond with a JSON object containing:
- entities: Object mapping entity IDs to their properties
- relationships: Array of {type, source, target, strength} objects
- worldUpdates: Object with any world state changes`;
    }
    
    /**
     * Builds a prompt for story generation.
     * 
     * @private
     * @param {string} playerInput - The player's input or action
     * @param {Object} worldState - Current world state
     * @returns {string} The constructed prompt
     */
    buildStoryGenerationPrompt(playerInput, worldState) {
        // Implementation would go here
        return `Continue the story based on the following player action and world state:
        
Player Action: "${playerInput}"

Current World State:
${JSON.stringify(worldState, null, 2)}

Respond with a narrative continuation that:
1. Acknowledges the player's action
2. Describes the immediate consequences
3. Sets up the next story beat
4. Is 1-3 paragraphs long`;
    }
    
    /**
     * Builds a prompt for consequence analysis.
     * 
     * @private
     * @param {string} playerInput - The player's input or action
     * @param {Object} choice - The choice being analyzed
     * @param {Object} worldState - Current world state
     * @returns {string} The constructed prompt
     */
    buildConsequenceAnalysisPrompt(playerInput, choice, worldState) {
        // Implementation would go here
        return `Analyze the consequences of the following choice in the current context:
        
Player Choice: "${playerInput}"

Choice Details:
${JSON.stringify(choice, null, 2)}

Current World State:
${JSON.stringify(worldState, null, 2)}

Respond with a JSON object containing:
- consequences: Object mapping affected entities to their changes
- impacts: Array of {type, description, severity} objects
- worldUpdates: Any updates to world state parameters`;
    }
    
    /**
     * Builds a prompt for world state analysis.
     * 
     * @private
     * @param {Object} worldState - Current world state
     * @returns {string} The constructed prompt
     */
    buildWorldAnalysisPrompt(worldState) {
        // Implementation would go here
        return `Analyze the following world state and identify any emerging story threads, conflicts, or opportunities:
        
Current World State:
${JSON.stringify(worldState, null, 2)}

Respond with a JSON object containing:
- conflicts: Array of potential conflicts or tensions
- opportunities: Array of potential story opportunities
- characterNeeds: Object mapping character IDs to their current needs/goals`;
    }
    
    // ===== Response Parsers =====
    
    /**
     * Parses the entity detection response from the AI.
     * 
     * @private
     * @param {string} response - The raw AI response
     * @returns {Object} The parsed entities, relationships, and world updates
     */
    parseEntityDetectionResponse(response) {
        try {
            // Try to parse the response as JSON
            const result = JSON.parse(response);
            
            // Validate the response structure
            if (!result.entities) result.entities = {};
            if (!result.relationships) result.relationships = [];
            if (!result.worldUpdates) result.worldUpdates = {};
            
            return result;
            
        } catch (error) {
            logger.error('Failed to parse entity detection response', { 
                error, 
                response: response?.substring(0, 200) || 'No response'
            });
            
            // Return a safe default if parsing fails
            return {
                entities: {},
                relationships: [],
                worldUpdates: {},
                error: 'Failed to parse entity detection response',
                isFallback: true
            };
        }
    }
    
    /**
     * Parses the consequence analysis response from the AI.
     * 
     * @private
     * @param {string} response - The raw AI response
     * @returns {Object} The parsed consequences and impacts
     */
    parseConsequenceResponse(response) {
        try {
            // Try to parse the response as JSON
            const result = JSON.parse(response);
            
            // Validate the response structure
            if (!result.consequences) result.consequences = {};
            if (!result.impacts) result.impacts = [];
            
            return result;
            
        } catch (error) {
            logger.error('Failed to parse consequence response', { 
                error, 
                response: response?.substring(0, 200) || 'No response'
            });
            
            // Return a safe default if parsing fails
            return {
                consequences: {},
                impacts: [],
                error: 'Failed to parse consequence response',
                isFallback: true
            };
        }
    }
}

module.exports = AIInterface;
